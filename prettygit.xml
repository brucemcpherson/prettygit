<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="prettygit gadget" height="100">
  		<Require feature="dynamic-height"/>

	</ModulePrefs>

	<UserPref
		name="user"
		required="true"
		datatype="string"
		display_name="github username"
		default_value="brucemcpherson"/>

	<UserPref
		name="repo"
		required="true"
		datatype="string"
		display_name="repo name"
		default_value="cUseful"/>

	<UserPref
		name="path"
		required="true"
		datatype="string"
		display_name="file path"
		default_value="README.md"/>

	<UserPref
		name="feedtitle"
		required="true"
		datatype="string"
		display_name="image label"
		default_value="Hover here to see content"/>

	<UserPref
		name="imageurl"
		required="true"
		datatype="string"
		display_name="image url for activation"
		default_value="http://googledrive.com/host/0B92ExLh4POiZcEJteERxZFNuVFU"/>

	<UserPref
		name="markdown"
		required="true"
		datatype="bool"
		display_name="translate from markdown"
		default_value="false"/>
		
	<UserPref
		name="prettify"
		required="true"
		datatype="bool"
		display_name="source prettification"
		default_value="true"/>
		
	<UserPref
		name="reveal"
		required="true"
		datatype="bool"
		display_name="permanently revealed"
		default_value="false"/>
		
	<UserPref
		name="dynamic"
		required="true"
		datatype="bool"
		display_name="dynamic height"
		default_value="true"/>
		
  <Content type="html"><![CDATA[

    <link rel="stylesheet"
      type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.css">
    <link rel="stylesheet"
      type="text/css" href="https://googledrive.com/host/0B92ExLh4POiZZExOY2M0RW5objg">


    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.js"></script>

        <style> {
          .feedbox {
            font-size:.8em;
            padding:6px;
          }
          .feedtitle {
            font-weight:bold;
          }
          .hover {
            display:inline-block;
          }

        }
        </style>

        <div id="hover" class="hover">
            <table>
                <tr>
                    <td>
                        <img id="hoverimg" src="https://googledrive.com/host/0B92ExLh4POiZcEJteERxZFNuVFU">
                    </td>
                    <td id="tdtitle" class="feedtitle">

                    </td>
                </tr>
            </table>
        </div>

        <div class="feedbox" id="feedbox" style="display:none;">
          <div id="sourcetitlebox">
          </div>
          <div id="source">
          </div>
        </div>

        <script>

        // register the entry point
        gadgets.util.registerOnLoadHandler(doFeed);


        function setVisiblity (e, value) {
         	e.style.display = value ? "inline-block" : "none";
        }

        function getHeight (e) {
         		return e.offsetHeight;
        }

        var globs = {};

        function doFeed() {


          // this is the image that gets out of the way when hovered over
          globs.hoverElem = document.getElementById("hover");
          globs.hoverImg = document.getElementById("hoverimg");

          // get the pref parameters
          var prefs = new gadgets.Prefs();
          globs.user = prefs.getString("user");
          globs.repo = prefs.getString("repo") ;
          globs.path = prefs.getString("path") ;
          globs.reveal = prefs.getBool("reveal") ;
          globs.markdown = prefs.getBool("markdown") ;
          globs.dynamic = prefs.getBool("dynamic") ;
          globs.prettify = prefs.getBool("prettify") ;
          
          
          // construct the api url
          globs.feedUrl = "https://api.github.com/repos/" +
              globs.user + "/" +
              globs.repo + "/contents/" +
              globs.path ;

          // this is where the feeds will be stored
          globs.feedBox = document.getElementById("feedbox");
          globs.tdTitle = document.getElementById("tdtitle");
          globs.sourceTitleBox = document.getElementById("sourcetitlebox");
          globs.source = document.getElementById("source");
          globs.pretty = document.getElementById("pretty");
          globs.tdTitle.innerHTML = prefs.getString("feedtitle") +
          " (click to lock/unlock view)";

          // set up image events
          globs.hoverImg.src = prefs.getString("imageurl");
    			if(!globs.hoverImg.src){
    				console.log ("disabled feed display - no image provided");
    			}

          // clicker on whether to lock visibility status
          // if permanently revealed we can just lock it
          globs.locked = globs.reveal;
          if (globs.reveal) over();
          
    			globs.hoverElem.addEventListener("mouseout",over , false);
  		   	globs.source.addEventListener("click",lock , false);
    			globs.hoverElem.addEventListener ("load", function () {
    				// when the image loads, get its height and adjust the gadget height to match
    				if (globs.dynamic ) {
    				  gadgets.window.adjustHeight(getHeight(globs.hoverElem));
    			  }
    			}, false);

          // happens on mouseover
          function over () {
            // means we need to start showing the source
            globs.hoverElem.removeEventListener("mouseover", over );
            globs.source.addEventListener("mouseout", out, false);
          	setVisiblity(globs.feedBox, true);
          	setVisiblity(globs.hoverElem, false);
          	
          	if (globs.dynamic )gadgets.window.adjustHeight(getHeight(globs.feedBox));
          };

          // happens on mouseclick
          function lock () {
            if (!globs.reveal ) {
              globs.locked = !globs.locked;
  
              // do an implied out - if its locked then nothing will happen
              out();
            }
          };

          // happens on mouseout
          function out () {
            // we are showing the source and need to stop if not locked
            if (!globs.locked) {
              globs.source.removeEventListener("mouseout",out);
              globs.hoverElem.addEventListener("mouseover",over , false);

            	setVisiblity(globs.feedBox, false);
            	setVisiblity(globs.hoverElem, true);
            	if(globs.dynamic)gadgets.window.adjustHeight(getHeight(globs.hoverElem));
            }
          };

          // get the content
          getData(globs.feedUrl);

      }

      //process it
      function doIt(data) {
        var content;
        if(!data.data) {
          content = "No data returned for " + globs.feedUrl;
        }
        else {
          try {
            // atob on mac breaks if spaces or \n
            content = atob (data.data.content.replace(/\s/g,''));

            // escape in case its xml
            content = content.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;");
            
            //now we do markdown translation
            if (globs.markdown) {
              corsRequest ( 
                function (response) {
                  setInner (response.responseText);
                },
                function (response) {
                  setInner ("failed to markup (" + response.statusText + ")\n" + content);
                },
                "https://api.github.com/markdown",
                "POST",
                JSON.stringify({"text": content})
              );
            }
            else {
              setInner (content);
            }
          }
          catch (err) {
            content = "failed to convert data from github " + err + ":perhaps browser is incapable";
            content += "\nwas retrieving " + globs.feedUrl;
            content += "\noriginal data was\n" + JSON.stringify(data,undefined, 2);
          }
        }

        
        globs.sourceTitleBox.innerHTML = ' Source for ' + globs.path +
          ' from ' + globs.user + "'s " +
          '<a href="https://github.com/' + globs.user + '/' + globs.repo + '">' +
          globs.repo + ' github repository</a>'
        
        function setInner (con) {
          globs.source.innerHTML =  '<pre class="prettyprint" style="font-size:.8em;">' +  con + '</pre>';
          if (globs.prettify) {
            globs.source.innerHTML =  '<pre class="prettyprint" style="font-size:.8em;">' +  con + '</pre>';
            prettyPrint();
          }
          else {
            globs.source.innerHTML = '<div class="markdown-body">' + con + '</div>';
          }
        }
      }

    	// jsonp response
    	function response(result) {

  	    if (!result.data  ) {
  	    	console.log ( 'error - no data(' + JSON.stringify(result) + ")");
  	    }
  	    doIt(result);
   	  }

   	  // easy jsonp.
      function getData(url) {

		    var script = document.createElement('script');
        script.src = url + "?callback=response";
		    document.body.appendChild(script);
  	  }

     /**
     * get the correct xhr object for the browser being used
     * @return {XDomainRequest|XMLHttpReQuest} the xhr
     */
    function getXhr () {
      
      // likely to be this, unless its IE
      var xhr = new XMLHttpRequest();
      return isDefined(xhr.withCredentials) ? 
        xhr : (isDefined(XDomainRequest) ? new XDomainRequest () : undefined);
    }
    
    function isDefined (ob) {
      return typeof ob !== typeof undefined;
    }
  
    /**
     *do a cors request
     *@param {function} callback the load callback
     *@param {function} errorCallback the error callback
     *@param {string}  url the url
     *@param {string} method the method (default GET)
     *@param {*} payload the optional payload
     *@return {object} the response
     */
    function corsRequest (callback, errorCallback,url , method, payload ) {
    
      // get the appropriate xhr
      var xhr = getXhr();
      if (!xhr) throw 'cant do cors with this browser';
      
      // now we can go
      xhr.open (method || "GET" , url , true);
      
      // set up callbacks
      xhr.onload = function (response) {
        // meed to catch this since it doesnt actually catch http errors
        if (response.target.status <200 || response.target.status >=300) {
          errorCallback (response);
        }
        else {
          callback (response.target);
        }
          
      }
      xhr.onerror = function (response) {
        errorCallback (response.target);
      }
      
      // execute
      return xhr.send (payload);
    }
    

  	</script>
  ]]>
  </Content>
</Module>
